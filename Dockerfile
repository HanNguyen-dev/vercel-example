FROM node:20-alpine AS base

# install dependencies
FROM base AS deps
RUN apk add --no-cache libc6-compat
RUN corepack enable
WORKDIR /app

COPY package.json .
COPY pnpm-lock.yaml .
RUN pnpm i --frozen-lockfile

# build
FROM base AS builder
WORKDIR /app
ARG AUTH_SECRET
ARG AUTH_URL
ARG DATABASE_URL
ARG DATABASE_URL_UNPOOLED
ARG PGHOST
ARG PGHOST_UNPOOLED
ARG PGUSER
ARG PGDATABASE
ARG PGPASSWORD
ARG POSTGRES_URL
ARG POSTGRES_URL_NON_POOLING
ARG POSTGRES_USER
ARG POSTGRES_HOST
ARG POSTGRES_PASSWORD
ARG POSTGRES_DATABASE
ARG POSTGRES_URL_NO_SSL
ARG POSTGRES_PRISMA_URL

ENV AUTH_SECRET=$AUTH_SECRET
ENV AUTH_URL=$AUTH_URL
ENV DATABASE_URL=$DATABASE_URL
ENV DATABASE_URL_UNPOOLED=$DATABASE_URL_UNPOOLED
ENV PGHOST=$PGHOST
ENV PGHOST_UNPOOLED=$PGHOST_UNPOOLED
ENV PGUSER=$PGUSER
ENV PGDATABASE=$PGDATABASE
ENV PGPASSWORD=$PGPASSWORD
ENV POSTGRES_URL=$POSTGRES_URL
ENV POSTGRES_URL_NON_POOLING=$POSTGRES_URL_NON_POOLING
ENV POSTGRES_USER=$POSTGRES_USER
ENV POSTGRES_HOST=$POSTGRES_HOST
ENV POSTGRES_PASSWORD=$POSTGRES_PASSWORD
ENV POSTGRES_DATABASE=$POSTGRES_DATABASE
ENV POSTGRES_URL_NO_SSL=$POSTGRES_URL_NO_SSL
ENV POSTGRES_PRISMA_URL=$POSTGRES_PRISMA_URL
COPY --from=deps /app/node_modules ./node_modules
COPY . .
RUN corepack enable
RUN pnpm build

# runner
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next ./

USER nextjs
EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
CMD [ "node", "server.js" ]